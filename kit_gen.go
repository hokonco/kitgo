// Code generated by MockGen. DO NOT EDIT.
// Source: kit_mock.go

// Package kitgo is a generated GoMock package.
package kitgo

import (
	context "context"
	tls "crypto/tls"
	io "io"
	fs "io/fs"
	net "net"
	smtp "net/smtp"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockFsFileInfo is a mock of FsFileInfo interface.
type MockFsFileInfo struct {
	ctrl     *gomock.Controller
	recorder *MockFsFileInfoMockRecorder
}

// MockFsFileInfoMockRecorder is the mock recorder for MockFsFileInfo.
type MockFsFileInfoMockRecorder struct {
	mock *MockFsFileInfo
}

// NewMockFsFileInfo creates a new mock instance.
func NewMockFsFileInfo(ctrl *gomock.Controller) *MockFsFileInfo {
	mock := &MockFsFileInfo{ctrl: ctrl}
	mock.recorder = &MockFsFileInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFsFileInfo) EXPECT() *MockFsFileInfoMockRecorder {
	return m.recorder
}

// IsDir mocks base method.
func (m *MockFsFileInfo) IsDir() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDir")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDir indicates an expected call of IsDir.
func (mr *MockFsFileInfoMockRecorder) IsDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDir", reflect.TypeOf((*MockFsFileInfo)(nil).IsDir))
}

// ModTime mocks base method.
func (m *MockFsFileInfo) ModTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ModTime indicates an expected call of ModTime.
func (mr *MockFsFileInfoMockRecorder) ModTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModTime", reflect.TypeOf((*MockFsFileInfo)(nil).ModTime))
}

// Mode mocks base method.
func (m *MockFsFileInfo) Mode() fs.FileMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mode")
	ret0, _ := ret[0].(fs.FileMode)
	return ret0
}

// Mode indicates an expected call of Mode.
func (mr *MockFsFileInfoMockRecorder) Mode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mode", reflect.TypeOf((*MockFsFileInfo)(nil).Mode))
}

// Name mocks base method.
func (m *MockFsFileInfo) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFsFileInfoMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFsFileInfo)(nil).Name))
}

// Size mocks base method.
func (m *MockFsFileInfo) Size() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockFsFileInfoMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockFsFileInfo)(nil).Size))
}

// Sys mocks base method.
func (m *MockFsFileInfo) Sys() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sys")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Sys indicates an expected call of Sys.
func (mr *MockFsFileInfoMockRecorder) Sys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sys", reflect.TypeOf((*MockFsFileInfo)(nil).Sys))
}

// MockNetAddr is a mock of NetAddr interface.
type MockNetAddr struct {
	ctrl     *gomock.Controller
	recorder *MockNetAddrMockRecorder
}

// MockNetAddrMockRecorder is the mock recorder for MockNetAddr.
type MockNetAddrMockRecorder struct {
	mock *MockNetAddr
}

// NewMockNetAddr creates a new mock instance.
func NewMockNetAddr(ctrl *gomock.Controller) *MockNetAddr {
	mock := &MockNetAddr{ctrl: ctrl}
	mock.recorder = &MockNetAddrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetAddr) EXPECT() *MockNetAddrMockRecorder {
	return m.recorder
}

// Network mocks base method.
func (m *MockNetAddr) Network() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network")
	ret0, _ := ret[0].(string)
	return ret0
}

// Network indicates an expected call of Network.
func (mr *MockNetAddrMockRecorder) Network() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockNetAddr)(nil).Network))
}

// String mocks base method.
func (m *MockNetAddr) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockNetAddrMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockNetAddr)(nil).String))
}

// MockNetConn is a mock of NetConn interface.
type MockNetConn struct {
	ctrl     *gomock.Controller
	recorder *MockNetConnMockRecorder
}

// MockNetConnMockRecorder is the mock recorder for MockNetConn.
type MockNetConnMockRecorder struct {
	mock *MockNetConn
}

// NewMockNetConn creates a new mock instance.
func NewMockNetConn(ctrl *gomock.Controller) *MockNetConn {
	mock := &MockNetConn{ctrl: ctrl}
	mock.recorder = &MockNetConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetConn) EXPECT() *MockNetConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockNetConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockNetConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNetConn)(nil).Close))
}

// LocalAddr mocks base method.
func (m *MockNetConn) LocalAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockNetConnMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockNetConn)(nil).LocalAddr))
}

// Read mocks base method.
func (m *MockNetConn) Read(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockNetConnMockRecorder) Read(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockNetConn)(nil).Read), b)
}

// RemoteAddr mocks base method.
func (m *MockNetConn) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockNetConnMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockNetConn)(nil).RemoteAddr))
}

// SetDeadline mocks base method.
func (m *MockNetConn) SetDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockNetConnMockRecorder) SetDeadline(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockNetConn)(nil).SetDeadline), t)
}

// SetReadDeadline mocks base method.
func (m *MockNetConn) SetReadDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockNetConnMockRecorder) SetReadDeadline(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockNetConn)(nil).SetReadDeadline), t)
}

// SetWriteDeadline mocks base method.
func (m *MockNetConn) SetWriteDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockNetConnMockRecorder) SetWriteDeadline(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockNetConn)(nil).SetWriteDeadline), t)
}

// Write mocks base method.
func (m *MockNetConn) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockNetConnMockRecorder) Write(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockNetConn)(nil).Write), b)
}

// MockNetDialer is a mock of NetDialer interface.
type MockNetDialer struct {
	ctrl     *gomock.Controller
	recorder *MockNetDialerMockRecorder
}

// MockNetDialerMockRecorder is the mock recorder for MockNetDialer.
type MockNetDialerMockRecorder struct {
	mock *MockNetDialer
}

// NewMockNetDialer creates a new mock instance.
func NewMockNetDialer(ctrl *gomock.Controller) *MockNetDialer {
	mock := &MockNetDialer{ctrl: ctrl}
	mock.recorder = &MockNetDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetDialer) EXPECT() *MockNetDialerMockRecorder {
	return m.recorder
}

// Dial mocks base method.
func (m *MockNetDialer) Dial(network, address string) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial", network, address)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial.
func (mr *MockNetDialerMockRecorder) Dial(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockNetDialer)(nil).Dial), network, address)
}

// DialContext mocks base method.
func (m *MockNetDialer) DialContext(ctx context.Context, network, address string) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialContext", ctx, network, address)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialContext indicates an expected call of DialContext.
func (mr *MockNetDialerMockRecorder) DialContext(ctx, network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialContext", reflect.TypeOf((*MockNetDialer)(nil).DialContext), ctx, network, address)
}

// MockNetResolver is a mock of NetResolver interface.
type MockNetResolver struct {
	ctrl     *gomock.Controller
	recorder *MockNetResolverMockRecorder
}

// MockNetResolverMockRecorder is the mock recorder for MockNetResolver.
type MockNetResolverMockRecorder struct {
	mock *MockNetResolver
}

// NewMockNetResolver creates a new mock instance.
func NewMockNetResolver(ctrl *gomock.Controller) *MockNetResolver {
	mock := &MockNetResolver{ctrl: ctrl}
	mock.recorder = &MockNetResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetResolver) EXPECT() *MockNetResolverMockRecorder {
	return m.recorder
}

// LookupAddr mocks base method.
func (m *MockNetResolver) LookupAddr(ctx context.Context, addr string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupAddr", ctx, addr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupAddr indicates an expected call of LookupAddr.
func (mr *MockNetResolverMockRecorder) LookupAddr(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupAddr", reflect.TypeOf((*MockNetResolver)(nil).LookupAddr), ctx, addr)
}

// LookupCNAME mocks base method.
func (m *MockNetResolver) LookupCNAME(ctx context.Context, host string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupCNAME", ctx, host)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupCNAME indicates an expected call of LookupCNAME.
func (mr *MockNetResolverMockRecorder) LookupCNAME(ctx, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupCNAME", reflect.TypeOf((*MockNetResolver)(nil).LookupCNAME), ctx, host)
}

// LookupHost mocks base method.
func (m *MockNetResolver) LookupHost(ctx context.Context, host string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupHost", ctx, host)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupHost indicates an expected call of LookupHost.
func (mr *MockNetResolverMockRecorder) LookupHost(ctx, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupHost", reflect.TypeOf((*MockNetResolver)(nil).LookupHost), ctx, host)
}

// LookupIP mocks base method.
func (m *MockNetResolver) LookupIP(ctx context.Context, network, host string) ([]net.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupIP", ctx, network, host)
	ret0, _ := ret[0].([]net.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupIP indicates an expected call of LookupIP.
func (mr *MockNetResolverMockRecorder) LookupIP(ctx, network, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupIP", reflect.TypeOf((*MockNetResolver)(nil).LookupIP), ctx, network, host)
}

// LookupIPAddr mocks base method.
func (m *MockNetResolver) LookupIPAddr(ctx context.Context, host string) ([]net.IPAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupIPAddr", ctx, host)
	ret0, _ := ret[0].([]net.IPAddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupIPAddr indicates an expected call of LookupIPAddr.
func (mr *MockNetResolverMockRecorder) LookupIPAddr(ctx, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupIPAddr", reflect.TypeOf((*MockNetResolver)(nil).LookupIPAddr), ctx, host)
}

// LookupMX mocks base method.
func (m *MockNetResolver) LookupMX(ctx context.Context, name string) ([]*net.MX, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupMX", ctx, name)
	ret0, _ := ret[0].([]*net.MX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupMX indicates an expected call of LookupMX.
func (mr *MockNetResolverMockRecorder) LookupMX(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupMX", reflect.TypeOf((*MockNetResolver)(nil).LookupMX), ctx, name)
}

// LookupNS mocks base method.
func (m *MockNetResolver) LookupNS(ctx context.Context, name string) ([]*net.NS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupNS", ctx, name)
	ret0, _ := ret[0].([]*net.NS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupNS indicates an expected call of LookupNS.
func (mr *MockNetResolverMockRecorder) LookupNS(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupNS", reflect.TypeOf((*MockNetResolver)(nil).LookupNS), ctx, name)
}

// LookupPort mocks base method.
func (m *MockNetResolver) LookupPort(ctx context.Context, network, service string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupPort", ctx, network, service)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupPort indicates an expected call of LookupPort.
func (mr *MockNetResolverMockRecorder) LookupPort(ctx, network, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupPort", reflect.TypeOf((*MockNetResolver)(nil).LookupPort), ctx, network, service)
}

// LookupSRV mocks base method.
func (m *MockNetResolver) LookupSRV(ctx context.Context, service, proto, name string) (string, []*net.SRV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupSRV", ctx, service, proto, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]*net.SRV)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LookupSRV indicates an expected call of LookupSRV.
func (mr *MockNetResolverMockRecorder) LookupSRV(ctx, service, proto, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupSRV", reflect.TypeOf((*MockNetResolver)(nil).LookupSRV), ctx, service, proto, name)
}

// LookupTXT mocks base method.
func (m *MockNetResolver) LookupTXT(ctx context.Context, name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupTXT", ctx, name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupTXT indicates an expected call of LookupTXT.
func (mr *MockNetResolverMockRecorder) LookupTXT(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupTXT", reflect.TypeOf((*MockNetResolver)(nil).LookupTXT), ctx, name)
}

// MockSmtpClient is a mock of SmtpClient interface.
type MockSmtpClient struct {
	ctrl     *gomock.Controller
	recorder *MockSmtpClientMockRecorder
}

// MockSmtpClientMockRecorder is the mock recorder for MockSmtpClient.
type MockSmtpClientMockRecorder struct {
	mock *MockSmtpClient
}

// NewMockSmtpClient creates a new mock instance.
func NewMockSmtpClient(ctrl *gomock.Controller) *MockSmtpClient {
	mock := &MockSmtpClient{ctrl: ctrl}
	mock.recorder = &MockSmtpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmtpClient) EXPECT() *MockSmtpClientMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockSmtpClient) Auth(a smtp.Auth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockSmtpClientMockRecorder) Auth(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockSmtpClient)(nil).Auth), a)
}

// Close mocks base method.
func (m *MockSmtpClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSmtpClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSmtpClient)(nil).Close))
}

// Data mocks base method.
func (m *MockSmtpClient) Data() (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Data indicates an expected call of Data.
func (mr *MockSmtpClientMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockSmtpClient)(nil).Data))
}

// Extension mocks base method.
func (m *MockSmtpClient) Extension(ext string) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extension", ext)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Extension indicates an expected call of Extension.
func (mr *MockSmtpClientMockRecorder) Extension(ext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extension", reflect.TypeOf((*MockSmtpClient)(nil).Extension), ext)
}

// Hello mocks base method.
func (m *MockSmtpClient) Hello(localName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello", localName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Hello indicates an expected call of Hello.
func (mr *MockSmtpClientMockRecorder) Hello(localName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockSmtpClient)(nil).Hello), localName)
}

// Mail mocks base method.
func (m *MockSmtpClient) Mail(from string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mail", from)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mail indicates an expected call of Mail.
func (mr *MockSmtpClientMockRecorder) Mail(from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mail", reflect.TypeOf((*MockSmtpClient)(nil).Mail), from)
}

// Noop mocks base method.
func (m *MockSmtpClient) Noop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Noop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Noop indicates an expected call of Noop.
func (mr *MockSmtpClientMockRecorder) Noop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Noop", reflect.TypeOf((*MockSmtpClient)(nil).Noop))
}

// Quit mocks base method.
func (m *MockSmtpClient) Quit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Quit indicates an expected call of Quit.
func (mr *MockSmtpClientMockRecorder) Quit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quit", reflect.TypeOf((*MockSmtpClient)(nil).Quit))
}

// Rcpt mocks base method.
func (m *MockSmtpClient) Rcpt(to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rcpt", to)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rcpt indicates an expected call of Rcpt.
func (mr *MockSmtpClientMockRecorder) Rcpt(to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rcpt", reflect.TypeOf((*MockSmtpClient)(nil).Rcpt), to)
}

// Reset mocks base method.
func (m *MockSmtpClient) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockSmtpClientMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockSmtpClient)(nil).Reset))
}

// StartTLS mocks base method.
func (m *MockSmtpClient) StartTLS(config *tls.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTLS", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTLS indicates an expected call of StartTLS.
func (mr *MockSmtpClientMockRecorder) StartTLS(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTLS", reflect.TypeOf((*MockSmtpClient)(nil).StartTLS), config)
}

// TLSConnectionState mocks base method.
func (m *MockSmtpClient) TLSConnectionState() (tls.ConnectionState, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TLSConnectionState")
	ret0, _ := ret[0].(tls.ConnectionState)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// TLSConnectionState indicates an expected call of TLSConnectionState.
func (mr *MockSmtpClientMockRecorder) TLSConnectionState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TLSConnectionState", reflect.TypeOf((*MockSmtpClient)(nil).TLSConnectionState))
}

// Verify mocks base method.
func (m *MockSmtpClient) Verify(addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockSmtpClientMockRecorder) Verify(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockSmtpClient)(nil).Verify), addr)
}
